package au.net.hivemedia.quasimodo

import java.io.File

import akka.actor.{Props, ActorSystem}
import com.typesafe.config.ConfigFactory
import com.typesafe.scalalogging.LazyLogging
import scala.concurrent.ExecutionContext.Implicits.global
import scala.util.{Failure, Success}

import BuildInfo._ // Generated by sbt-buildinfo (LiamHaworth)

/**
  * The main entry point of the service
  *
  * @author Liam Haworth
  */
object AppMain extends App with LazyLogging {

  logger.info(s"Starting Quasimodo v$version")

  logger.info("Loading configuration")

  private val defaultConfig = ConfigFactory.load()
  private val fileConfig = ConfigFactory.parseFile(new File("/etc/quasimodo.conf"))
  val config = fileConfig.withFallback(defaultConfig)

  logger.info("Initializing actor system")

  implicit val actorSystem = ActorSystem("Quasimodo")

  logger.info("Adding shutdown hook into runtime")

  sys.addShutdownHook({
    logger.warn("Shutting down system")

    actorSystem.terminate() onComplete {
      case Success(_) =>
        logger.info("System successfully shutdown")

      case Failure(ex) =>
        logger.error("System shutdown with an exception", ex)
    }
  })

  logger.info("Initializing and starting the discovery system")

  val discovery = actorSystem.actorOf(Props[Discovery], "Discovery")

  discovery ! "Start"

}
